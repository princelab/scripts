#!/usr/bin/env ruby

require 'optparse'

require 'nokogiri'
require 'mspire/ident/peptide_hit/qvalue'

EXT = Mspire::Ident::PeptideHit::Qvalue::FILE_EXTENSION

opt = {}
opts = OptionParser.new do |op|
  op.banner = "usage: #{File.basename(__FILE__)} [OPTS] <file>.pep.xml ..."
  op.separator "output: <file>#{EXT} ..."
  op.separator ""
  op.separator "takes pepxml files generated by Proteome Discoverer"
  op.separator "  (made using the Percolator module for q-values)"
  op.separator "and outputs files compatible with:"
  op.separator "  peptide_hit_qvalues_to_spectral_counts_table.rb"
  op.separator ""
  op.on("--separate", "tease apart into original raw file run", "(based on spectral search name)") {|v| opt[:separate] = v }
end
opts.parse!

if ARGV.size == 0
  puts opts
  exit
end

PSM = Struct.new(:search_id, :spectrum_id, :id, :aaseq, :charge, :score, :qvalue)

ARGV.each do |pepxml_file|

  base = pepxml_file.sub(".pep.xml", ".xml")
  base = base.chomp(File.extname(base))

  psms = File.open(pepxml_file) do |io|
    doc = Nokogiri::XML.parse(io, nil, nil, Nokogiri::XML::ParseOptions::DEFAULT_XML | Nokogiri::XML::ParseOptions::NOBLANKS | Nokogiri::XML::ParseOptions::STRICT)
    # we can work with namespaces, or just remove them ...
    doc.remove_namespaces!
    root = doc.root
    search_hits = root.xpath("//search_hit[@hit_rank='1']")
    search_hits.each_with_index.map do |search_hit,i| 
      spectrum_query = search_hit.parent.parent
      charge = spectrum_query['assumed_charge'].to_i
      spectrum_id = spectrum_query[:spectrum]
      aaseq = search_hit['peptide']
      nodes_by_name = search_hit.children.group_by(&:name)
      search_scores = {}
      nodes_by_name['search_score'].each do |node|
        search_scores[node['name'].to_sym] = node['value'].to_f
      end
      analysis_results = {}
      nodes_by_name['analysis_result'].each do |node|
        analysis_results[node['analysis']] = node.children.map do |atnode| 
          atnode.attribute_nodes.each_with_object({}) do |attribute, hash|
            hash[attribute.name] = attribute.value
          end
        end
      end
      perc_result = analysis_results['percolator'].last
      PSM.new( base, spectrum_id, "hit_#{i}", aaseq, charge, perc_result['probability'].to_f, perc_result['q-Value'].to_f)
    end
  end
  if opt[:separate]
    grouped_psms = psms.group_by do |psm|
      data = psm.spectrum_id.split('.')
      data[0...-3].join('.')
    end
    grouped_psms.each do |base, psms|
      outfile = Mspire::Ident::PeptideHit::Qvalue.to_phq(base, psms)
      puts "wrote to: #{outfile}"
    end
  else
    outfile = Mspire::Ident::PeptideHit::Qvalue.to_phq(base, psms)
    puts "wrote to: #{outfile}"
  end

end
